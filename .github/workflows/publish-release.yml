name: Upload To PyPI

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache poetry installation
      id: cache-poetry
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('.github/workflows/tests.yml') }}
    - name: Install poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version=${{ env.POETRY_VERSION }}
    - name: Setup poetry environment
      id: setup-poetry-env
      run: |
        poetry env use $(which python)
        echo "::set-output name=poetry-env::$(poetry env info --path)"
    - name: Cache poetry virtual environment
      id: cache-poetry-venv
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-poetry-env.outputs.poetry-env }}
        key: poetry-env-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('poetry.lock') }}-${{ hashFiles('.github/workflows/tests.yml') }}
    - name: Install dependencies
      if: steps.cache-poetry-venv.outputs.cache-hit != 'true'
      run: |
        poetry install
    - name: Confidence check (run tests)
      run: |
        poetry run pytest
    - name: Build package
      run: |
        poetry build
    - name: Publish package
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{secrets.PYPI_API_TOKEN}}
        run: |
          poetry publish
